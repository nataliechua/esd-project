# WHAT THIS FILE IS DOING
    # create images and start containers for inventory.py; patient.py; payment.py; prescription.py
    # start RabbitMQ container
    # run amqp_setup.py which set up exchange and queue for RabbitMQ
    # create images and start containers for twilio_message.py(acts like queue); process.py

# HOW TO RUN OUR APP AND THIS COMPOSE FILE
    # PREPARATION
        # 1) start WAMP(MySQL) and docker(stop/remove the previous same-name containers before running, see useful commands below)
        # 2) import sql database (remember to allow remote database access in order to run containers, if never did see lab 3)
        # 3) change all valeriewoon in this file to your own docker id
        # 4) in twilio_message.py line 42/43, enter twillio SID and TOKEN
        # 5) put the frontend folder in www localhost to access

    # RUN FILE
        # 1) in terminal change directory to current
        # 2) create and start containers: docker-compose up -d
            # A default network named esd-project_default is created.
            # Containers named docker-<containerName>-1 is created.
            # Containers join their default networks which names equal to their services' names
        # 3) OPTIONAL: show realtime logs of a service: docker-compose logs -f <servicename>
        # 4) OPTIONAL: IF WANT TO SEE RabbitMQ management website
            # go http://localhost:15672 
            # The default username / password = guest / guest
        # 5) you can now go through our app by front end
            # OPTIONAL BUT IMPORTANT: to see all senarios, you better signup a patient info using your own phone num in order to receive msg (if hp have added in twilio account)
        # 6) stop and remove containers: docker-compose down

    # OTHER USEFUL COMMANDS
        # check containers status: docker-compose ps
        # stop containers: docker-compose stop
        # start containers: docker-compose start

        # list all images: docker image ls
        # remove image: docker rmi <image id>
        # list all containers (stopped and running): docker ps â€“a
        # delete container: docker rm -f <containerid>
        # show logs of container: docker logs <containerid>
        # show realtime logs of container: docker logs -f <containerid>


version: "3.8"

volumes:
  rabbitmq_data:

services:

  ##################################
  # Patient MS
  ##################################
  patient:
    build:
      context: ./
      dockerfile: patient.Dockerfile
    image: valeriewoon/patient:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/patient
      PYTHONUNBUFFERED: 1
    ports:
      - "5000:5000"

  ##################################
  # Prescription MS
  ##################################
  prescription:
    build:
      context: ./
      dockerfile: prescription.Dockerfile
    image: valeriewoon/prescription:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/prescription
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"

  ##################################
  # Payment MS
  ##################################
  payment:
    build:
      context: ./
      dockerfile: payment.Dockerfile
    image: valeriewoon/payment:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/payment
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"
 
  ###################################
  # Inventory MS
  ###################################
  inventory:
    build:
      context: ./
      dockerfile: inventory.Dockerfile
    image: valeriewoon/inventory:esd 
    #:esd will be set as the tag for the image, instead of using the default image name: <folder>_<service>
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/inventory
      PYTHONUNBUFFERED: 1
      # It is to ensure the output of the print statements in Python programs 
      # are sent straight to the terminal screen and not buffered

  ####################################
  # RabbitMQ: The messaging broker
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq

  #################################################
  # Twilio Message MS
  #################################################
  twilio_message:
    build:
      context: ./
      dockerfile: twilio_message.Dockerfile
    image: valeriewoon/twilio_message:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  ###############################################
  # Process CMS
  ###############################################
  process:
    build:
      context: ./
      dockerfile: process.Dockerfile
    image: valeriewoon/process:esd
    restart: always
    depends_on:
      - patient
      - inventory
      - prescription
      - payment
      - rabbitmq
      - twilio_message
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      get_medicine_info_URL: http://inventory:5002/inventory/ #+name GET
      update_inventory_URL: http://inventory:5002/inventory/ #+name PUT
      get_patient_info_URL: http://patient:5000/patient/ #+patientId GET
      get_pending_prescriptions_URL: http://prescription:5001/prescription/pending #GET
      get_unsend_pending_prescriptions_URL: http://prescription:5001/prescription/pending/no #GET
      update_prescription_URL: http://prescription:5001/prescription/ #+prescriptionId PUT
      record_prescription_in_paymentMS_URL: http://payment:5003/payment/create #POST
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"


# MSs published their ports to frontend (can be called from localhost, the links in Readme work in docker.compose):
    # patient, prescription, payment, rabbitMQ, twilio, process
# MSs that don't published their ports to frontend (cannot be called from localhost, the links in Readme cannot work in docker.compose)):
    # inventory(connect to process via internal netwrok), twilio_message(connect to rabbit via internal netwrok)
    # eg. we use inventory as the hostname of the inventory service. http://inventory:5002/inventory/




